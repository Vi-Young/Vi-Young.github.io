<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vi-Young Space</title>
  
  <subtitle>Talk Less Think More</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vi-young.com/"/>
  <updated>2018-05-29T16:22:39.413Z</updated>
  <id>http://vi-young.com/</id>
  
  <author>
    <name>Vi-Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础专题（一）：基本数据类型</title>
    <link href="http://vi-young.com/2018/05/30/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://vi-young.com/2018/05/30/Java基础专题（一）：基本数据类型/</id>
    <published>2018-05-29T23:56:00.000Z</published>
    <updated>2018-05-29T16:22:39.413Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>今天我们来聊一下Java这门语言的数据类型，众所周知，Java是一种强类型语言。在Java中，一共有8种基本类型，其中4种整形，2种浮点类型，1种用于表示Unicode编码的字符单元的字符类型char和1种用于表示真值的boolean类型。</p><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>整形用于表示没有小数部分的数值，允许为负。</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">存储大小</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">4字节</td><td style="text-align:center">-2,147,483,648 ~ 2,147,483,647</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2字节</td><td style="text-align:center">-32,768 ~ 32,767</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8字节</td><td style="text-align:center">-9,223,372,036,854,775,808 ~ 9223,372,036,854,775,807</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">1字节</td><td style="text-align:center">-128 ~ 127</td></tr></tbody></table><p>在Java中，整形的范围与运行Java代码的机器无关。这解决了软件从一个平台移植到另外一个平台，或者在同一个平台的不同操作系统之间进行移植给程序员带来的麻烦。</p><p>长整形（Long类型）数值后有一个后缀 L 或 l（这里建议不要使用小写的 l 来标识，因为在某些字体的格式下，1和 l 几乎没有任何区别，给月阅读的人带来很大的困扰）。</p><p>十六进制数值前缀为 0x 或 0X，这里需要说一点，八进制的前缀是0，比如010，这样的写法比较容易让人混淆，所以我们一般不要使用八进制来表示数据。</p><p>二进制数值的前缀为 0b 或 0B，例如0b1001所代表的十进制数据就是9。</p><p>从Java7开始，可以在数字字面量加下划线，比如1_000_000，这些下划线的作用仅仅是使代码的易读性更高，编译器在编译的时候会去除这些下划线。</p><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><p>浮点类型用于表示有小数部分的数值，在Java中有两种浮点类型。</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:center">存储大小</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:left">float</td><td style="text-align:center">4字节</td><td style="text-align:center">大约 ± 3.402,823,47E+38F(有效位为6-7位)</td></tr><tr><td style="text-align:left">double</td><td style="text-align:center">8字节</td><td style="text-align:center">大约 ± 1.79769313486231570E+308（有效位15位）</td></tr></tbody></table><p>double表示这种类型的数值精度是float类型的两倍（故有人称double为双精度数值），事实上我们在使用的过程中，绝大多数情况都会选用double，因为float的精度通常无法满足我们的要求。</p><p>float类型的数值有一个后缀 f 或 F，没有后缀的浮点值就是double类型的。</p><p>可以使用十六进制来表示浮点数值，例如 0.125（2的负三次方）可以表示为 0x1.0p-3。在十六进制中，使用p表示指数，而不是e。</p><p>三个特殊的浮点数值：</p><pre><code>1. 正无穷大（Double.POSITIVE_INFINITY）2. 负无穷大（Double.NEGATIVE_INFINITY）3. NAN（Double.NaN）</code></pre><h4 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h4><p>一个或两个char类型的数值可以用来表示一个Unicode字符，在代码中，char类型的字面量值需要用单引号括起来，char类型的值可以表示为以 \u 开头的16进制数值，用于表示一些标点和特殊符号所用。</p><p>一些较为特殊的字符的转移序列如下：</p><table><thead><tr><th>转义序列</th><th style="text-align:center">名称</th><th style="text-align:center">Unicode值</th></tr></thead><tbody><tr><td>\b</td><td style="text-align:center">退格</td><td style="text-align:center">\u000</td></tr><tr><td>\t</td><td style="text-align:center">制表</td><td style="text-align:center">\u0009</td></tr><tr><td>\n</td><td style="text-align:center">换行</td><td style="text-align:center">\u000a</td></tr><tr><td>\r</td><td style="text-align:center">回车</td><td style="text-align:center">\u000d</td></tr><tr><td>\“</td><td style="text-align:center">双引号</td><td style="text-align:center">\u0022</td></tr><tr><td>\‘</td><td style="text-align:center">单引号</td><td style="text-align:center">\u0027</td></tr><tr><td>\\</td><td style="text-align:center">反斜杠</td><td style="text-align:center">\u005c</td></tr></tbody></table><font color="red"><strong>Unicode转义序列会在解析代码之前得到处理（大坑慎入！）</strong></font><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// download uri d:<span class="symbol">\u</span>ser<span class="symbol">\a</span>，这里会报语法错误，因为 <span class="symbol">\u</span> 后面没有跟着4个十六进制数。</span><br></pre></td></tr></table></figure><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>布尔类型有两个值：false和true，用来判定逻辑条件，整型值和布尔值之间不能互相转换，这一点与C或C++不同，需要留意一下。</p><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ol><li>《Core Java Volume Ⅰ-Fundamentals》 – Cay S.Horstmann</li></ol><hr><h4 id="下集预告"><a href="#下集预告" class="headerlink" title="下集预告"></a>下集预告</h4><p>下一期我们来见识一下Java中各种各样运算符的奥秘，三天一更，我们不见不散~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;今天我们来聊一下Java这门语言的数据类型，众所周知，Java是一种强类型语言。在Java中，一共有8种基本类型，其中4种整形，2种浮点类型
      
    
    </summary>
    
      <category term="Java" scheme="http://vi-young.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://vi-young.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0 系列（一）：快速开始</title>
    <link href="http://vi-young.com/2018/05/28/Spring-Boot-2-0-%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://vi-young.com/2018/05/28/Spring-Boot-2-0-系列（一）：快速开始/</id>
    <published>2018-05-27T18:35:00.000Z</published>
    <updated>2018-05-27T10:45:38.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li>SpringBoot版本：2.0.2 RELEASE</li><li>开发工具：IDEA 2017.2</li><li>相关资料：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">SpringBoot官方文档</a></li></ul><h2 id="1-介绍SpringBoot"><a href="#1-介绍SpringBoot" class="headerlink" title="1. 介绍SpringBoot"></a>1. 介绍SpringBoot</h2><p>Spring Boot可以使我们轻松地创建独立的、生产级的基于Spring的应用程序，由于整合了一些对Spring和第三方库的配置，我们可以快速开始一个应用程序。大多数Spring Boot应用程序都需要很少的Spring配置。</p><p>我们可以使用Spring Boot来创建Java应用程序，这些应用程序可以通过使用 <strong>java -jar</strong> 或更传统的war部署来启动。Spring Boot还提供了一个运行“spring脚本”的命令行工具。</p><p>Spring Boot 为我们都做了什么:</p><ul><li><p>为所有Spring开发人员提供一种快速而广泛的入门体验。</p></li><li><p>由于整合了一些对Spring和第三方库的配置解决了深受XML配置困扰的Spring开发人员的痛点</p></li><li><p>提供一系列非功能特性，这些特性在大型项目中是常见的(例如嵌入式服务器、安全、度量、健康检查和外部化配置)。</p></li></ul><h2 id="2-系统环境需求"><a href="#2-系统环境需求" class="headerlink" title="2.系统环境需求"></a>2.系统环境需求</h2><ul><li>Java  8 或 9</li><li>Spring 5.0.6 RELEASE 或 以上</li><li><p>构建工具</p><ul><li>Maven 3.2 +</li><li>Gradle 4 </li></ul></li><li><p>Spring Boot支持以下servlet容器:</p><ul><li>Tomcat 8.5</li><li>Jetty 9.4</li><li>Undertow 1.4 </li></ul></li></ul><h2 id="3-构建项目的方式"><a href="#3-构建项目的方式" class="headerlink" title="3. 构建项目的方式"></a>3. 构建项目的方式</h2><p><strong>1.基于Maven的构建</strong><br>        pom.xml 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.基于Gradle的构建</strong><br>    bulid.gradle 内容如下：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">plugins</span> &#123;</span><br><span class="line"><span class="built_in">id</span> <span class="string">'org.springframework.boot'</span> version <span class="string">'2.0.2.RELEASE'</span></span><br><span class="line"><span class="built_in">id</span> <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">jar</span> &#123;</span><br><span class="line">baseName = <span class="string">'myproject'</span></span><br><span class="line">version =  <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">compile(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>)</span><br><span class="line">testCompile(<span class="string">"org.springframework.boot:spring-boot-starter-test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-开发Spring-Boot-的Hello-World-项目-使用maven构建工具"><a href="#4-开发Spring-Boot-的Hello-World-项目-使用maven构建工具" class="headerlink" title="4.开发Spring Boot 的Hello World 项目(使用maven构建工具)"></a>4.开发Spring Boot 的Hello World 项目(使用maven构建工具)</h2><p><br></p><p><strong>第一步：创建pom文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步：添加依赖</strong></p><p>Spring Boot提供了许多“starter”，可以让您将jar添加到classpath 中。上文已经在POM的父部分使用了spring-boot-starter-parent。spring-boot-starter-parent是一个特殊的“starter”，它提供有用的Maven默认值。它还提供了一个依赖管理部分，这样我们就就可以为关联的依赖项省略版本标记。<br>其他”starter”提供了在开发特定类型的应用程序时可能需要的依赖项。由于我们正在开发一个web应用程序，所以我们添加了一个spring-boot-starter-web依赖项。在此之前，我们可以通过运行以下命令查看当前所拥有的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步：编写代码</strong></p><p>要完成我们的应用程序，我们需要创建一个Java文件，Java文件包含以下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(Example.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong><br>在我们的示例类上的第一个注释是@RestController。这被称为构造型注释。它为阅读代码的人们提供了一些提示，并且为Spring提供了一个特定的角色。在本例中，我们的类是一个web @Controller，所以Spring在处理传入web请求时考虑它。@RequestMapping注释提供路由信息。它告诉Spring，任何带有/ path的HTTP请求都应该映射到home方法。@RestController注释告诉Spring将生成的字符串直接呈现给调用者。</p></blockquote><blockquote><p>第二个类级别注释是@EnableAutoConfiguration。这个注释告诉Spring Boot基于您添加的jar依赖项“猜测”您想如何配置Spring，。因为Spring-boot-starter-web添加了Tomcat和Spring MVC，所以自动配置假设您正在开发一个web应用程序，并相应地设置Spring。</p></blockquote><blockquote><p>我们的应用程序的最后一部分是主方法。这只是遵循应用程序入口点的Java约定的标准方法。通过调用run，我们的main方法委托给Spring Boot的SpringApplication类。SpringApplication引导我们的应用程序启动Spring，而Spring又启动了自动配置的Tomcat web服务器。我们需要通过例子。类作为运行方法的参数，以告诉SpringApplication是主Spring组件。args数组也被传递，以公开任何命令行参数。</p></blockquote><p><strong>第四步：运行程序：</strong></p><p>运行main方法，或者在根目录运行 mvn spring-boot: run命令。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mvn spring-boot:run</span><br><span class="line"></span><br><span class="line">  .   ____          <span class="symbol">_</span>            <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span></span><br><span class="line"> /\\ / ___'<span class="symbol">_</span> <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span>(<span class="symbol">_</span>)<span class="symbol">_</span> <span class="symbol">__</span>  <span class="symbol">__</span> <span class="symbol">_</span> \ \ \ \</span><br><span class="line">( ( )\___ | '<span class="symbol">_</span> | '<span class="symbol">_</span>| | '<span class="symbol">_</span> \/ <span class="symbol">_</span>` | \ \ \ \</span><br><span class="line"> \\/  ___)| |<span class="symbol">_</span>)| | | | | || (<span class="symbol">_</span>| |  ) ) ) )</span><br><span class="line">  '  |____| .<span class="symbol">__</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>\<span class="symbol">__</span>, | / / / /</span><br><span class="line"> =========|<span class="symbol">_</span>|==============|___/=/<span class="symbol">_</span>/<span class="symbol">_</span>/<span class="symbol">_</span>/</span><br><span class="line"> :: Spring Boot ::  (v2.0.2.RELEASE)</span><br><span class="line">....... . . .</span><br><span class="line">....... . . . (<span class="built_in">log</span> output here)</span><br><span class="line">....... . . .</span><br><span class="line">........ Started Example <span class="keyword">in</span> <span class="number">2.222</span> seconds (JVM running <span class="keyword">for</span> <span class="number">6.514</span>)</span><br></pre></td></tr></table></figure><p>打开浏览器，输入localhost:8080，你可以看到</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p><strong>第五步：创建可执行的jar</strong></p><p>将下列代码添加到pom.xml文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存文件，并在命令行输入maven package，可以看到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">mvn</span> <span class="string">package</span></span><br><span class="line"></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">Scanning</span> <span class="string">for</span> <span class="string">projects...</span></span><br><span class="line"><span class="string">[INFO]</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">Building</span> <span class="string">myproject</span> <span class="number">0.0</span><span class="number">.1</span><span class="bullet">-SNAPSHOT</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">....</span> <span class="string">..</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="meta">---</span> <span class="attr">maven-jar-plugin:2.4:jar</span> <span class="string">(default-jar)</span> <span class="string">@</span> <span class="string">myproject</span> <span class="meta">---</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">Building</span> <span class="attr">jar:</span> <span class="string">/Users/developer/example/spring-boot-example/target/myproject-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string">[INFO]</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="meta">---</span> <span class="attr">spring-boot-maven-plugin:2.0.2.RELEASE:repackage</span> <span class="string">(default)</span> <span class="string">@</span> <span class="string">myproject</span> <span class="meta">---</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">BUILD</span> <span class="string">SUCCESS</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>这时你会发现target目录下多了一个名为myprojectname-0.0.1-SNAPSHOT.jar的文件，文件大概10MB，如果你想查看文件的详细内容，可以使用</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jar tvf target/myproject<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>如果你想运行，可以使用 java -jar，如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar target/myproject-<span class="number">0.0</span>.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">  .   ____          <span class="symbol">_</span>            <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span></span><br><span class="line"> /\\ / ___'<span class="symbol">_</span> <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span>(<span class="symbol">_</span>)<span class="symbol">_</span> <span class="symbol">__</span>  <span class="symbol">__</span> <span class="symbol">_</span> \ \ \ \</span><br><span class="line">( ( )\___ | '<span class="symbol">_</span> | '<span class="symbol">_</span>| | '<span class="symbol">_</span> \/ <span class="symbol">_</span>` | \ \ \ \</span><br><span class="line"> \\/  ___)| |<span class="symbol">_</span>)| | | | | || (<span class="symbol">_</span>| |  ) ) ) )</span><br><span class="line">  '  |____| .<span class="symbol">__</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>\<span class="symbol">__</span>, | / / / /</span><br><span class="line"> =========|<span class="symbol">_</span>|==============|___/=/<span class="symbol">_</span>/<span class="symbol">_</span>/<span class="symbol">_</span>/</span><br><span class="line"> :: Spring Boot ::  (v2.0.2.RELEASE)</span><br><span class="line">....... . . .</span><br><span class="line">....... . . . (<span class="built_in">log</span> output here)</span><br><span class="line">....... . . .</span><br><span class="line">........ Started Example <span class="keyword">in</span> <span class="number">2.536</span> seconds (JVM running <span class="keyword">for</span> <span class="number">2.864</span>)</span><br></pre></td></tr></table></figure><p>若知后事如何，且听下回分解~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;SpringBoot版本：2.0.2 RELEASE&lt;/li&gt;
&lt;li&gt;开发工具：IDEA 2017.2&lt;/li
      
    
    </summary>
    
      <category term="Java" scheme="http://vi-young.com/categories/Java/"/>
    
    
      <category term="Spring Boot" scheme="http://vi-young.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>《用户体验要素》读后笔记（三）</title>
    <link href="http://vi-young.com/2018/05/05/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/05/《用户体验要素》读后笔记（三）/</id>
    <published>2018-05-04T16:10:00.000Z</published>
    <updated>2018-05-09T06:38:56.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构层"><a href="#结构层" class="headerlink" title="结构层"></a>结构层</h1><p>在定义好用户需求并排序好优先级别之后，我们对于最终差您将会包括什么特性已经有了清楚的图像，然而这些需求并没有说明如何将这些分散的片段组成一个整体，这就是范围层的上面一层：为网站建立一个概念结构。</p><p>结构层适当的将我们的关注点从抽象的决策与范围问题，转移到更能影响最后的用户体验的具体因素，传统的软件开发行业，涉及”为用户设计结构化体验”的方法被称为交互设计。在内容建设方面，主要是通过信息架构来构建用户体验。这两个都强调一个重点：确定各个将要呈现给用户的元素的“模式”和“顺序”。与其针对机器的最佳工作方式来设计系统，还不如设计一个对用户而言最好的系统，用户对于“交互组件将怎么样工作”的观点成为概念模型。概念模型是用于在交互设计的开发过程中保持使用方式的一致性的，交互设计会处理每一个级别的错误，以确保更高比例的用户能有积极的体验。</p><h2 id="信息架构"><a href="#信息架构" class="headerlink" title="信息架构"></a>信息架构</h2><ul><li>信息架构所研究的是人们如何认知信息的过程，对于产品而言，信息架构关注的是呈现给用户的信息是否合理并具有意义</li><li>信息架构要求创建分类体系，创建分类体系的方法有从上向下和从下向上，但是这两种方法都有一定的局限性，唯一可避免两者缺点的方法是在两种方法中找到一个平衡点</li><li>一个高效结构的优点就是具备“容纳成长和适应变动”的能力 </li><li>信息架构的基本单位是节点</li><li>节点的结构包括层级结构（树状、辐射）、矩阵结构、自然结构、线性结构</li><li>节点在信息架构是依据组织原则来安置的</li><li>我们的困难不是创建一个结构，而是在创建一个能与“我们的目标”和“用户的需求”相对应、正确的结构</li><li>成功的用户体验，就是能事先预知用户的期望并将其带入到设计当中去</li><li>“使用客户的语言”并且“保持一致性”是非常重要的，我们把用来强调一致性的工具称为受控词典</li><li>元数据的意思，简单地说就是“关于信息的信息”，即以一个结构化的方式来描述内容的信息。   </li></ul><h1 id="框架层"><a href="#框架层" class="headerlink" title="框架层"></a>框架层</h1><p>在充满概念的结构层中开始形成大量的需求，这些需求都是来自我们的战略目标的需求。在框架层，我们要更进一步的提炼这些结构，确定很详细的界面外观，导航和信息设计，这能让晦涩的结构变得实在。对于功能性产品，我们通过界面设计来确定框架，对于信息型产品，要解决的问题是导航设计，但是这两者都应解决信息设计这一方面。</p><blockquote><p>提供给用户做某些事的能力，这属于界面设计。<br> 提供给用户去某个地方的能力，这是导航设计。<br> 传达想法给用户，那就是信息设计。</p></blockquote><ul><li>传统的习惯并非一定要死守，当某种方式有着不错的收益时，应该谨慎的试着违背一些习惯。</li><li>有效的使用比喻，即减少用户在理解你的产品时对猜测的要求。</li><li>界面设计的全部事情就是选择正确的界面元素</li><li>设计复杂系统的界面所面临的最大挑战之一，是弄清楚用户不需要哪些东西，并减少他们的可发现性。</li><li><p>导航设计必须完成以下三个目标：<br> ① 提供用户一种在网页间跳转的方法<br> ② 元素与所包含内容之间的关系<br> ③ 内容与当前用户浏览页面之间的关系<br> 多重导航系统：<br> 全局导航，局部导航，辅助导航，上下文导航，友好导航，远程导航，网络地图，索引表</p></li><li><p>将信息设计和导航设计结合到一起，有一个重要的作用：支持指示标识。</p></li><li><p>页面布局是将信息设计、界面设计和导航设计放置到一起，形成一个统一的，有内在凝聚力的架构，这个架构的具体文档的展示方式为线框图。</p></li><li><p>线框图是整合在框架层的全部三种要素的方法：通过安排和选择界面元素来整合界面设计；通过识别和定义核心导航系统来整合导航设计；通过放置和排列信息组成部分的优先级来整合信息设计。</p></li></ul><h1 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h1><p>在这五个模型的顶端，我们把注意力转移到产品用户会首先注意到的地方：感知设计，这里，内容、功能和美学汇集到一起来缠身一个最终设计，完成其他四个层面的所有目标，并同时满足用户的感官感受。</p><ul><li><p>表现层中几乎所有的产品都会涉及到视觉设计，在视觉设计中，我们用于吸引用户注意的一个主要工具就是对比。</p></li><li><p>在你的设计中保持一致性是另一个重要的组成部分，它能使你的设计有效地传达信息，而不会导致用户迷惑或焦虑。“一致性”在视觉设计的许多不同方面都会起到作用。</p></li><li><p>内部和外部的一致性：<br>  ① 内部一致性的问题。这是说，在产品的两个不同的地方反映了不同的设计方法。<br>  ② 外部一致性的问题。这是说，这个产品没有在同一个企业的其他产品中，反映出被使用的，相同的设计方法。</p></li><li><p>配色方案与排版对于品牌形象的建立，以及对于公众的影响显得尤为重要。</p></li><li><p>在视觉设计领域中对线框图最直接的模拟是视觉模型或设计合成品。</p></li><li><p>承载这些设计决策的权威性文档是风格指南。这个汇总文档确定了视觉设计的每个方面，从最大到最小的范围内的所有元素</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;结构层&quot;&gt;&lt;a href=&quot;#结构层&quot; class=&quot;headerlink&quot; title=&quot;结构层&quot;&gt;&lt;/a&gt;结构层&lt;/h1&gt;&lt;p&gt;在定义好用户需求并排序好优先级别之后，我们对于最终差您将会包括什么特性已经有了清楚的图像，然而这些需求并没有说明如何将这些分散的片段
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://vi-young.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="UE" scheme="http://vi-young.com/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>《用户体验要素》读后笔记（二）</title>
    <link href="http://vi-young.com/2018/05/04/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/04/《用户体验要素》读后笔记（二）/</id>
    <published>2018-05-04T15:52:00.000Z</published>
    <updated>2018-05-09T06:42:29.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="战略层"><a href="#战略层" class="headerlink" title="战略层"></a>战略层</h1><p>成功的用户体验，其基础是一个被明确表达的“战略”，知道企业与用户双方对产品的期许和目标，有助于促进用户体验各方面战略的确定和制定。</p><blockquote><p>明确两个问题：我们要通过这个产品得到什么？ 我们的客户要通过这个产品得到什么？<br>    ①     产品目标     ②     用户需求</p></blockquote><h2 id="产品目标："><a href="#产品目标：" class="headerlink" title="产品目标："></a>产品目标：</h2><p>   ①     商业目标（商业驱动因素）<br>    ②     品牌识别<br>    ③     成功标识</p><h2 id="用户需求："><a href="#用户需求：" class="headerlink" title="用户需求："></a>用户需求：</h2><p>   ①     用户细分</p><pre><code>1. 人口统计学2. 消费心理档案</code></pre><p>   ②     可用性和用户研究</p><pre><code>1. 市场调研方法2. 现场调研3. 任务分析4. 用户测试5. 卡片排序法6. 用户模型</code></pre><p>这是就需要一篇战略文档，而战略文档的关键在于<strong>简洁明了</strong>并<strong>切中要点</strong>，战略是设计用户体验设计流程中的起点。</p><h1 id="范围层"><a href="#范围层" class="headerlink" title="范围层"></a>范围层</h1><p>带着“我们想要什么”、“我们的用户想要什么”的明确认识，我们才能弄清楚如何去满足这些战略的目标，当你把用户需求和产品目标转变成产品应该提供给用户什么样的内容和功能时，战略就变成了范围。</p><p>用文档定义产品需求的必要性：<br>    ① 这样你才知道你在建设什么<br>    ② 这样你才知道你不需要建设什么</p><blockquote><p>范围层被功能型产品和信息型产品分为了功能规格和内容需求，定义需求的详略层度往往取决于该项目的具体范围。</p></blockquote><h2 id="功能规格说明："><a href="#功能规格说明：" class="headerlink" title="功能规格说明："></a>功能规格说明：</h2><ol><li>文档不能解决问题，但定义可以，我们需要的不是文档有厚或有多详细，而是要足够清楚和准确。</li><li>乐观：描述这个系统将要做什么事情去“防止”不好的情况发生</li><li>具体：尽可能详细的解释清楚情况</li><li>在文档中要尽量避免主观的语气</li></ol><h2 id="内容需求："><a href="#内容需求：" class="headerlink" title="内容需求："></a>内容需求：</h2><ol><li>应该提供每一个特性规模的文档预估：文本的字数，图片的像素大小，下载的文件字节、PDF或音频文件等独立元素的大小等。</li><li>内容特性的更新频率来自于产品的战略目标，必须确定一个频率，它是介于你的用户期望值和有效值之间</li></ol><h2 id="确定需求优先级："><a href="#确定需求优先级：" class="headerlink" title="确定需求优先级："></a>确定需求优先级：</h2><ol><li>有些特性可能会因为技术上的局限无法实现，有些则是因为资源与时间上的不足</li><li>很少有功能时独立存在的</li><li>如果你的战略计划或愿景文档在战略目标的范围内制定了一个清晰的优先级别顺序，那么这些优先级别应该是决定是否采纳人们所建议的相关特性的首要因素</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;战略层&quot;&gt;&lt;a href=&quot;#战略层&quot; class=&quot;headerlink&quot; title=&quot;战略层&quot;&gt;&lt;/a&gt;战略层&lt;/h1&gt;&lt;p&gt;成功的用户体验，其基础是一个被明确表达的“战略”，知道企业与用户双方对产品的期许和目标，有助于促进用户体验各方面战略的确定和制定。&lt;
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://vi-young.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="UE" scheme="http://vi-young.com/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>《用户体验要素》 读后笔记（一）</title>
    <link href="http://vi-young.com/2018/05/04/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/04/《用户体验要素》读后笔记（一）/</id>
    <published>2018-05-04T15:38:00.000Z</published>
    <updated>2018-05-09T06:42:52.092Z</updated>
    
    <content type="html"><![CDATA[<p>最近有幸拜读了Jesse James Garrett所著的用户体验要素这本书，感触颇多，感觉对于UE这门课程有了一个较为系统的认识，知道了用户体验为什么是如此的重要，以及用户体验的五个元素。</p><p>在产品开发过程中,人们更多的关注what to do, 设计师经常忽略的另一个因素是how to do, 而这一因素恰恰是决定产品成败的关键因素。</p><blockquote><p>“外形服从于功能”</p></blockquote><p>这种观点对于产品的内部运作(用户不可见的部分)是完全适用的, 但是, 对于产品直接面向用户的那些部分—按钮, 布局, 文字, 也包括外观, 正确的产品形态绝对不是由”功能”所决定的, 而是应该由”<strong>用户自身的心理感受和行为</strong>“来决定的</p><blockquote><p>提供优质的用户体验, 是一个重要的可持续的竞争优势 —— 不仅仅对网站是这样, 对所有类型的产品和服务都是如此</p></blockquote><p>创建吸引人的,高效的用户体验的方法称为”以用户为中心的设计”. 以用户为中心的设计思想非常简单,: 在开发产品的每一个步骤中, 都要把用户列入考虑范围，下面我们来认识一下这些要素。</p><h2 id="五个要素"><a href="#五个要素" class="headerlink" title="五个要素"></a>五个要素</h2><p>用户体验开发时的五个要素(5s)</p><pre><code>表现层(surface)    一系列的网页, 由图片和文字组成框架层(skeleton)    按钮, 控件, 照片和文本区域的位置, 优化设计布局, 以达到这些元素的最大效果和效率结构层(structure)    框架是结构的具体表达方式范围层(scope)    结构层确定网站各种特性和功能最合适的组合方式, 而这些特性和功能就构成了网站的范围层战略层(strategy)    网站的范围基本上是由网站战略层决定的</code></pre><h2 id="双重性"><a href="#双重性" class="headerlink" title="双重性"></a>双重性</h2><p>自下而上的建设，并且让每一个层面的工作在下一个层面可以结束之前完成，网站具有基本的双重性，描述功能型的平台类产品和描述信息的媒介类产品。</p><pre><code>功能性产品, 主要关注的任务, 所有的操作都被纳入一个过程,  去思考人们如何完成这个过程, 这里的网站实际上是用户用于完成任务的一种工具信息性产品, 主要的关注点是信息, 创建一个富信息的用户体验, 就是提供给用户一个可以寻找, 理解且有意义的组合</code></pre><h2 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h2><pre><code>1.战略层所关注的内容都是一样的, 来自企业外部的用户需求和来自自己对网站的期望目标。2.由范围层进入战略层, 在功能型产品一侧转化为功能规格: 对产品的&quot;功能组合&quot;的详细描述. 而在信息型产品一侧, 范围则是以内容需求的形式出现:     对各种内容元素的要求的详细描述。3.在功能性产品一侧, 结构层将从范围转化为交互设计, 在这里我们可以定义系统如何响应用户的请求,另一侧是信息架构: 合理的安排内容元素以促进人类理解信息4.在框架层, 必不可少的是信息设计, 功能性产品偏向于界面设计, 而信息类产品, 则偏向于导航设计.5.最后, 在表现层, 关注点都在于最终产品创建用户体验</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有幸拜读了Jesse James Garrett所著的用户体验要素这本书，感触颇多，感觉对于UE这门课程有了一个较为系统的认识，知道了用户体验为什么是如此的重要，以及用户体验的五个元素。&lt;/p&gt;
&lt;p&gt;在产品开发过程中,人们更多的关注what to do, 设计师经常忽
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://vi-young.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="UE" scheme="http://vi-young.com/tags/UE/"/>
    
  </entry>
  
</feed>
