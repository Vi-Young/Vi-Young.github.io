<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vi-Young Space</title>
  
  <subtitle>Talk Less Think More</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vi-young.com/"/>
  <updated>2018-05-27T10:42:27.524Z</updated>
  <id>http://vi-young.com/</id>
  
  <author>
    <name>Vi-Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 2.0 系列（一）：快速开始</title>
    <link href="http://vi-young.com/2018/05/28/Spring-Boot-2-0-%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://vi-young.com/2018/05/28/Spring-Boot-2-0-系列（一）：快速开始/</id>
    <published>2018-05-27T18:35:00.000Z</published>
    <updated>2018-05-27T10:42:27.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li>SpringBoot版本：2.0.2 RELEASE</li><li>开发工具：IDEA 2017.2</li><li>相关资料：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">SpringBoot官方文档</a></li></ul><h2 id="1-介绍SpringBoot"><a href="#1-介绍SpringBoot" class="headerlink" title="1. 介绍SpringBoot"></a>1. 介绍SpringBoot</h2><p>Spring Boot可以使我们轻松地创建独立的、生产级的基于Spring的应用程序，由于整合了一些对Spring和第三方库的配置，我们可以快速开始一个应用程序。大多数Spring Boot应用程序都需要很少的Spring配置。</p><p>我们可以使用Spring Boot来创建Java应用程序，这些应用程序可以通过使用 <strong>java -jar</strong> 或更传统的war部署来启动。Spring Boot还提供了一个运行“spring脚本”的命令行工具。</p><p>Spring Boot 为我们都做了什么:</p><ul><li><p>为所有Spring开发人员提供一种快速而广泛的入门体验。</p></li><li><p>由于整合了一些对Spring和第三方库的配置解决了深受XML配置困扰的Spring开发人员的痛点</p></li><li><p>提供一系列非功能特性，这些特性在大型项目中是常见的(例如嵌入式服务器、安全、度量、健康检查和外部化配置)。</p></li></ul><h2 id="2-系统环境需求"><a href="#2-系统环境需求" class="headerlink" title="2.系统环境需求"></a>2.系统环境需求</h2><ul><li>Java  8 或 9</li><li>Spring 5.0.6 RELEASE 或 以上</li><li><p>构建工具</p><ul><li>Maven 3.2 +</li><li>Gradle 4 </li></ul></li><li><p>Spring Boot支持以下servlet容器:</p><ul><li>Tomcat 8.5</li><li>Jetty 9.4</li><li>Undertow 1.4 </li></ul></li></ul><h2 id="3-构建项目的方式"><a href="#3-构建项目的方式" class="headerlink" title="3. 构建项目的方式"></a>3. 构建项目的方式</h2><p><strong>1.基于Maven的构建</strong><br>        pom.xml 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.基于Gradle的构建</strong><br>    bulid.gradle 内容如下：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">plugins</span> &#123;</span><br><span class="line"><span class="built_in">id</span> <span class="string">'org.springframework.boot'</span> version <span class="string">'2.0.2.RELEASE'</span></span><br><span class="line"><span class="built_in">id</span> <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">jar</span> &#123;</span><br><span class="line">baseName = <span class="string">'myproject'</span></span><br><span class="line">version =  <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">compile(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>)</span><br><span class="line">testCompile(<span class="string">"org.springframework.boot:spring-boot-starter-test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-开发Spring-Boot-的Hello-World-项目-使用maven构建工具"><a href="#4-开发Spring-Boot-的Hello-World-项目-使用maven构建工具" class="headerlink" title="4.开发Spring Boot 的Hello World 项目(使用maven构建工具)"></a>4.开发Spring Boot 的Hello World 项目(使用maven构建工具)</h2><p><br></p><p><strong>第一步：创建pom文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二步：添加依赖</strong></p><p>Spring Boot提供了许多“starter”，可以让您将jar添加到classpath 中。上文已经在POM的父部分使用了spring-boot-starter-parent。spring-boot-starter-parent是一个特殊的“starter”，它提供有用的Maven默认值。它还提供了一个依赖管理部分，这样我们就就可以为关联的依赖项省略版本标记。<br>其他”starter”提供了在开发特定类型的应用程序时可能需要的依赖项。由于我们正在开发一个web应用程序，所以我们添加了一个spring-boot-starter-web依赖项。在此之前，我们可以通过运行以下命令查看当前所拥有的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步：编写代码</strong></p><p>要完成我们的应用程序，我们需要创建一个Java文件，Java文件包含以下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">SpringApplication.run(Example.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong><br>在我们的示例类上的第一个注释是@RestController。这被称为构造型注释。它为阅读代码的人们提供了一些提示，并且为Spring提供了一个特定的角色。在本例中，我们的类是一个web @Controller，所以Spring在处理传入web请求时考虑它。@RequestMapping注释提供路由信息。它告诉Spring，任何带有/ path的HTTP请求都应该映射到home方法。@RestController注释告诉Spring将生成的字符串直接呈现给调用者。<br>第二个类级别注释是@EnableAutoConfiguration。这个注释告诉Spring Boot基于您添加的jar依赖项“猜测”您想如何配置Spring，。因为Spring-boot-starter-web添加了Tomcat和Spring MVC，所以自动配置假设您正在开发一个web应用程序，并相应地设置Spring。<br>我们的应用程序的最后一部分是主方法。这只是遵循应用程序入口点的Java约定的标准方法。通过调用run，我们的main方法委托给Spring Boot的SpringApplication类。SpringApplication引导我们的应用程序启动Spring，而Spring又启动了自动配置的Tomcat web服务器。我们需要通过例子。类作为运行方法的参数，以告诉SpringApplication是主Spring组件。args数组也被传递，以公开任何命令行参数。</p></blockquote><p><strong>第四步：运行程序：</strong></p><p>运行main方法，或者在根目录运行 mvn spring-boot: run命令。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mvn spring-boot:run</span><br><span class="line"></span><br><span class="line">  .   ____          <span class="symbol">_</span>            <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span></span><br><span class="line"> /\\ / ___'<span class="symbol">_</span> <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span>(<span class="symbol">_</span>)<span class="symbol">_</span> <span class="symbol">__</span>  <span class="symbol">__</span> <span class="symbol">_</span> \ \ \ \</span><br><span class="line">( ( )\___ | '<span class="symbol">_</span> | '<span class="symbol">_</span>| | '<span class="symbol">_</span> \/ <span class="symbol">_</span>` | \ \ \ \</span><br><span class="line"> \\/  ___)| |<span class="symbol">_</span>)| | | | | || (<span class="symbol">_</span>| |  ) ) ) )</span><br><span class="line">  '  |____| .<span class="symbol">__</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>\<span class="symbol">__</span>, | / / / /</span><br><span class="line"> =========|<span class="symbol">_</span>|==============|___/=/<span class="symbol">_</span>/<span class="symbol">_</span>/<span class="symbol">_</span>/</span><br><span class="line"> :: Spring Boot ::  (v2.0.2.RELEASE)</span><br><span class="line">....... . . .</span><br><span class="line">....... . . . (<span class="built_in">log</span> output here)</span><br><span class="line">....... . . .</span><br><span class="line">........ Started Example <span class="keyword">in</span> <span class="number">2.222</span> seconds (JVM running <span class="keyword">for</span> <span class="number">6.514</span>)</span><br></pre></td></tr></table></figure><p>打开浏览器，输入localhost:8080，你可以看到</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p><strong>第五步：创建可执行的jar</strong></p><p>将下列代码添加到pom.xml文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存文件，并在命令行输入maven package，可以看到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">mvn</span> <span class="string">package</span></span><br><span class="line"></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">Scanning</span> <span class="string">for</span> <span class="string">projects...</span></span><br><span class="line"><span class="string">[INFO]</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">Building</span> <span class="string">myproject</span> <span class="number">0.0</span><span class="number">.1</span><span class="bullet">-SNAPSHOT</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">....</span> <span class="string">..</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="meta">---</span> <span class="attr">maven-jar-plugin:2.4:jar</span> <span class="string">(default-jar)</span> <span class="string">@</span> <span class="string">myproject</span> <span class="meta">---</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">Building</span> <span class="attr">jar:</span> <span class="string">/Users/developer/example/spring-boot-example/target/myproject-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string">[INFO]</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="meta">---</span> <span class="attr">spring-boot-maven-plugin:2.0.2.RELEASE:repackage</span> <span class="string">(default)</span> <span class="string">@</span> <span class="string">myproject</span> <span class="meta">---</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="string">BUILD</span> <span class="string">SUCCESS</span></span><br><span class="line"><span class="string">[INFO]</span> <span class="bullet">------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>这时你会发现target目录下多了一个名为myprojectname-0.0.1-SNAPSHOT.jar的文件，文件大概10MB，如果你想查看文件的详细内容，可以使用</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jar tvf target/myproject<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>如果你想运行，可以使用 java -jar，如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar target/myproject-<span class="number">0.0</span>.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">  .   ____          <span class="symbol">_</span>            <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span></span><br><span class="line"> /\\ / ___'<span class="symbol">_</span> <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span>(<span class="symbol">_</span>)<span class="symbol">_</span> <span class="symbol">__</span>  <span class="symbol">__</span> <span class="symbol">_</span> \ \ \ \</span><br><span class="line">( ( )\___ | '<span class="symbol">_</span> | '<span class="symbol">_</span>| | '<span class="symbol">_</span> \/ <span class="symbol">_</span>` | \ \ \ \</span><br><span class="line"> \\/  ___)| |<span class="symbol">_</span>)| | | | | || (<span class="symbol">_</span>| |  ) ) ) )</span><br><span class="line">  '  |____| .<span class="symbol">__</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>\<span class="symbol">__</span>, | / / / /</span><br><span class="line"> =========|<span class="symbol">_</span>|==============|___/=/<span class="symbol">_</span>/<span class="symbol">_</span>/<span class="symbol">_</span>/</span><br><span class="line"> :: Spring Boot ::  (v2.0.2.RELEASE)</span><br><span class="line">....... . . .</span><br><span class="line">....... . . . (<span class="built_in">log</span> output here)</span><br><span class="line">....... . . .</span><br><span class="line">........ Started Example <span class="keyword">in</span> <span class="number">2.536</span> seconds (JVM running <span class="keyword">for</span> <span class="number">2.864</span>)</span><br></pre></td></tr></table></figure><p>若知后事如何，且听下回分解~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;SpringBoot版本：2.0.2 RELEASE&lt;/li&gt;
&lt;li&gt;开发工具：IDEA 2017.2&lt;/li
      
    
    </summary>
    
      <category term="Java" scheme="http://vi-young.com/categories/Java/"/>
    
    
      <category term="Spring Boot" scheme="http://vi-young.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java基础回顾知识点（二）</title>
    <link href="http://vi-young.com/2018/05/21/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/21/Java基础回顾知识点（二）/</id>
    <published>2018-05-21T06:13:00.000Z</published>
    <updated>2018-05-20T14:15:56.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本程序设计结构"><a href="#基本程序设计结构" class="headerlink" title="基本程序设计结构"></a>基本程序设计结构</h2><ul><li>由于自增和自减运算符会改变变量的值，所以它们的操作数不能是<strong>数值</strong>。例如 4 ++ 就不是一个合法的语句。</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int n = <span class="number">4</span>;</span><br><span class="line">n++; <span class="comment">//正确。</span></span><br><span class="line"><span class="number">4</span>++; <span class="comment">//错误。</span></span><br></pre></td></tr></table></figure><ul><li><p>++n 与 n++ <strong>前缀</strong>形式会改变变量的值，<strong>后缀</strong>则是使用变量原来的值。</p></li><li><p>&amp;&amp; 和 || 运算负是按照<strong>短路</strong>方法来求值的，如果第一个操作数已经可以确定表达式的值，第二个数就不必计算了。</p></li><li><p>利用&amp;（位运算符）并结合使用适当的2的幂，可以将其他位掩掉，而只保留其中的某一位。</p></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fourthBitFromRight = (n &amp; <span class="number">0b10000</span>) / <span class="number">0b10000</span>; //如果第四位为<span class="number">1</span>,则返回<span class="number">1</span>,否则返回<span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li><p>“ &gt;&gt;&gt; “运算符会用0填充高位，这与” &gt;&gt; “不同，他会用符号位填充高位，不存在” &lt;&lt;&lt; “运算符。</p></li><li><p>移位运算符的右操作数要完成<strong>模32</strong>的运算（除非左操作数是long类型，在这种情况下需要对右操作数模64）.例如，1&lt;&lt;35的值等同于1&lt;&lt;3 或 8。</p></li><li><p>有时候，变量的取值只会在一个有限的集合内，这是就会用到枚举（enum）类型的值。</p></li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Size</span> &#123;</span></span><br><span class="line">    SMALL,MEDIUM,LARGE,EXTRA_LARGE;</span><br><span class="line">&#125;</span><br><span class="line">/<span class="regexp">/声明一个枚举变量</span></span><br><span class="line"><span class="regexp">Size s = Size.MEDIUM;</span></span><br></pre></td></tr></table></figure><ul><li><p>Java字符串就是<strong>Unicode字符序列</strong>，每个用双引号括起来的字符串都是String类的一个实例。</p></li><li><p>substring(first , last)的截取方法是取头不取尾。</p></li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="built_in">s1</span> = <span class="string">"hello"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="built_in">s2</span> = <span class="built_in">s1</span>.<span class="keyword">substring(0,3); </span>// <span class="built_in">s2</span> = <span class="string">"hel"</span></span><br></pre></td></tr></table></figure><ul><li>如果需要把多个字符串放在一起，用一个定界符分离，可以使用静态join方法。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> <span class="literal">all</span> = <span class="built_in">String</span>.<span class="keyword">join</span>(<span class="string">"/"</span>, <span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>); <span class="comment">// all = "S/M/L/XL"</span></span><br></pre></td></tr></table></figure><ul><li><p>由于不能修改Java字符串中的字符，所以String类对象被称为不可变字符串，但是可以修改字符串变量的引用地址，将它从一个字符串引用到另一个字符串。</p></li><li><p>编译器可以让字符串共享，共享带来的高效率远远大于提取和拼接字符串所带来的低效率。</p></li><li><p>各种字符串存放在公共的存储池中，字符串变量指向存储池中相应的位置。</p></li><li><p>原始字符串放置在堆中，Java将自动地进行垃圾回收，如果一块内存不再使用了，系统最终会将其回收。</p></li><li><p>使用equals方法判断两个字符串是否相等，一定不要使用 ==运算符检测两个字符串是否相等，因为他们判断的是<strong>地址</strong>，而非值。</p></li><li><p>空串是“”，<strong>长度为0</strong>的字符串。</p></li><li><p>当一个变量等于<strong>null</strong>，说明当前没有任何对象与这个变量相关联。</p></li><li><p>Java字符串由char值序列组成，char数据类型是一个采用UTF-16编码表示Unicode码点的代码单元，辅助字符需要用一对代码单元来表示。</p></li><li><p>当需要遍历一个字符串获取每一个码点的方法是使用<strong>codePoints</strong>，会生成一个int数值的“流”，然后将流转换成数组在进行遍历，反之，如果需要转换成字符串，可以使用String的构造方法。</p></li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">n</span> = greeting.length(); // length方法返回采用UTF-<span class="number">16</span>编码表示的给定字符串所需要的代码单元数量。 <span class="number">5</span></span><br><span class="line"></span><br><span class="line">//得到实际的码点数量。</span><br><span class="line"><span class="built_in">int</span> cpCount = greeting.codePointCount(<span class="number">0</span>, <span class="built_in">n</span>);</span><br><span class="line"></span><br><span class="line">//charAt(<span class="built_in">n</span>) 返回位置为<span class="built_in">n</span>的代码单元</span><br><span class="line"><span class="built_in">char</span> first = greeting.charAt(<span class="number">0</span>); // first is ‘h’</span><br><span class="line"></span><br><span class="line">//得到第<span class="built_in">n</span>个码点</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">index</span> = greeting.offsetByCodePoints(<span class="number">0</span>, <span class="built_in">n</span>);</span><br><span class="line"><span class="built_in">int</span> cp = greeting.codePointAt(<span class="built_in">index</span>);</span><br></pre></td></tr></table></figure><ul><li><p>StringBuilder和StringBuffer的API是一样的，StringBuffer允许采用多线程的方式执行添加或删除字符串的操作，如果所有字符串在一个<strong>单线程</strong>中编辑，则应该使用StringBuilder替代它。</p></li><li><p>格式说明符：% + 索引参数值 + $ + 标志 + 宽度 + 精度 + 转换字符</p></li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%1$s %2$tB %2$te, %2$tY"</span>, <span class="string">"Due date:"</span>, new Date());</span><br><span class="line">//<span class="keyword">print</span> Due Date: May <span class="number">20</span>, <span class="number">2018</span></span><br></pre></td></tr></table></figure><ul><li><p>块（即复合语句）是指由一对大括号括起来的若干条简单的Java语句，块确定了变量的作用域，一个块可以嵌套在另一个块中。</p></li><li><p>不可以在嵌套的块中声明同名的变量。</p></li><li><p>使用块可以在Java程序结构中原本只能放置一条（简单）语句的地方放置多条语句。</p></li><li><p>如果开始循环的条件的值就为false，则while循环体一次也不执行。</p></li><li><p>如果希望循环体至少执行一次，则应该将检测条件放在最后。使用do/while循环语句可以实现这种操作方式。</p></li><li><p>for语句的第1部分通常用于对计数器初始化；第2部分给出每次第一轮循环执行前要检测的循环条件；第3部分指示如何更新计数器。</p></li><li><p>在for语句的第1部分中声明了一个变量后，这个变量的作用域就为for循环的整个循环体。</p></li><li><p>如果希望在for循环体之外使用循环计数器的最终值，就要确保这个变量在循环语句的前面且在外部声明。</p></li><li><p>可以在各自独立的不同for循环中定义同名的变量。</p></li><li><p>case标签可以是类型为char，byte，short或int的常量表达式，枚举常量，字符串字面量。</p></li><li><p>break是结束当前的循环，而continue是结束本次循环进行下一次循环，在循环前使用标签，可以使用break的标签决定结束哪一个循环。</p></li><li><p>BigInteger类实现了任意精度的整数计算，BigDecimal实现了任意精度的浮点数计算，但是不能用算术运算符来处理大数值，而要使用大数值类中的add和multiply方法。</p></li><li><p>数组是一种数据结构，用于存储同一类型值的集合。</p></li><li><p>创建一个数字数组时，所有元素都初始化为0。boolean数据的元素会初始化为false。对象数组的元素则初始化为一个特殊值null，这表示这些元素（还）未存放任何对象。</p></li><li><p>for each循环语句的循环变量将会遍历数组中的每个元素，而不需要使用下标值。</p></li><li><p>数组排序可以使用Arrays的sort方法</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">Arrays.<span class="keyword">sort</span>(a);</span><br></pre></td></tr></table></figure><ul><li>数组拷贝使用的是Arrays的copyOf方法</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] <span class="built_in">num</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] copyNum = Arrays.copyOf(<span class="built_in">num</span>, <span class="built_in">num</span>.length);</span><br></pre></td></tr></table></figure><ul><li>二维数组的遍历需要使用两重循环来完成</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>[][] rows = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span>[] row : rows) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> <span class="keyword">value</span> : row) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本程序设计结构&quot;&gt;&lt;a href=&quot;#基本程序设计结构&quot; class=&quot;headerlink&quot; title=&quot;基本程序设计结构&quot;&gt;&lt;/a&gt;基本程序设计结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;由于自增和自减运算符会改变变量的值，所以它们的操作数不能是&lt;strong&gt;数值&lt;
      
    
    </summary>
    
      <category term="Java" scheme="http://vi-young.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://vi-young.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java基础回顾知识点（一）</title>
    <link href="http://vi-young.com/2018/05/13/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/13/Java基础回顾知识点（一）/</id>
    <published>2018-05-12T20:54:00.000Z</published>
    <updated>2018-05-12T13:08:42.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本系列主要讲Java基础知识，是对自己温故知新的总结，一个标题为一个内容，同时也欢迎各方大佬指出文中不对的地方前来交流探讨技术~</p><h2 id="Java”白皮书“的关键术语："><a href="#Java”白皮书“的关键术语：" class="headerlink" title="Java”白皮书“的关键术语："></a>Java”白皮书“的关键术语：</h2><ul><li>简单性  </li><li>面向对象 </li><li>分布式 </li><li>健壮性 </li><li>安全性 </li><li>体系结构中立 </li><li>可移植性 </li><li>解释型 </li><li>高性能 </li><li>多线程 </li><li>动态性</li></ul><h2 id="关于Java的常见误解"><a href="#关于Java的常见误解" class="headerlink" title="关于Java的常见误解"></a>关于Java的常见误解</h2><ul><li>Java是HTML的扩展 </li><li>使用XML，所以不需要Java </li><li>Java是一种非常容易学习的程序设计语言 </li><li>Java将成为适用于所有平台的通用性编程语言</li><li>Java只不过是另外一种程序设计语言 </li><li>Java是专用的，应该避免使用 </li><li>Java是解释型的，因此对于关键的应用程序速度太慢了 </li><li>所有的Java程序都是在网页中运行的 </li><li>JavaScript是Java的简易版 </li><li>使用Java可以用廉价的Internet设备取代桌面计算机   </li></ul><h2 id="基本程序设计结构"><a href="#基本程序设计结构" class="headerlink" title="基本程序设计结构"></a>基本程序设计结构</h2><ul><li><p>类作为一个加载程序逻辑的<strong>容器</strong>，程序逻辑定义了应用程序的行为。类是构建所有Java应用程序和applet的构建块。Java应用程序中的全部内容都必须放置在类中。</p></li><li><p>源代码的文件名必须与<strong>公共类</strong>的名字相同，这里需要注意的是公共类，而非所有类，比如内部类的名字就不必与源代码的文件名相同。</p></li><li><p>根据Java语言规范，main方法必须声明为<strong>public</strong>。</p></li><li><p>在Java中，所有的数值类型所占据的字节数量与平台无关。</p></li><li><p>可以使用十六进制表示浮点数值。例如，0.125 = 2的负三次方可以表示成 0x1.0p-3。在十六进制表示法中，使用p表示指数，而不是e。注意，尾数采用十六进制，指数采用十进制，指数的基数是2，而不是10。</p></li><li><p>用于表示溢出和出错情况的三个特殊的浮点数值：</p><ul><li>正无穷大</li><li>负无穷大</li><li>NaN（Not A Number）</li></ul></li><li><p>Unicode转移序列会在解析代码之前得到处理，更隐秘的，一定要多加注意注释中的\u注释</p></li><li><p>所有”非数值“的值都认为是不相同的。然而，可以使用Double.isNaN方法。</p></li><li><p>在基本的多语言级别中，每个字符用16位表示，通常被称为代码单元。</p></li><li><p>在Java中，char类型描述了UTF-16编码中的一个代码单元。</p></li><li><p>boolean类型有两个值：false和true，用于判定逻辑条件。整数值和布尔值之间不能进1行相互转换。</p></li><li><p>如果想知道哪些Unicode字符属于Java中的“字母”，可以使用Character类的isJavaIndentifierStart和isJavaIdentifierPart方法来检查。</p></li><li><p>声明一个变量后，必须用赋值语句对变量进行显式初始化。</p></li><li><p>在Java中，利用关键字final指示常量，表示这个常量只能被赋值一次，一旦被赋值之后，就不能被更改了。习惯上，常量名使用全大写。</p></li><li><p>在Java中，可以通过static final来定义类常量，这个类常量可以在一个类的多个方法中使用，注意，<strong>类常量需要定义在main方法外部</strong>。</p></li><li><p>使用strictfp关键字来标记main方法，则main方法中所有指令都将会进行严格的浮点计算用于生成可再生的结果。</p></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">strictfp</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)</span><br></pre></td></tr></table></figure><ul><li>计算一个数值的平方根，可以使用sqrt方法。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">double</span> y = Math.<span class="built_in">sqrt</span>(x);</span><br><span class="line">System.out.<span class="built_in">println</span>(y); <span class="comment">//prints 2.0</span></span><br></pre></td></tr></table></figure><ul><li>借助于Math类的pow方法，可以将y的值设置为x的a次幂。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> y = Math.<span class="built_in">pow</span>(x,a)；</span><br></pre></td></tr></table></figure><ul><li><p>floorMod方法可以防止除数为负的时候，进行 % 运算时余数为负（但是不能避免被除数为负时，floorMod得到负数结果）</p></li><li><p>如果得到一个完全可预测的结果比运行速度更重要的话，应该使用StrictMath类。它使用fdlibm来实现算法，以确保在所有平台上得到相同的结果。（ps：我们平时使用都是Math类）</p></li><li><p>如果想对浮点数进行舍入运算，以便得到最接近的整数，那就需要使用Math.round方法。</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> x1 = <span class="number">9.997</span>;</span><br><span class="line"><span class="built_in">int</span> nx1 = (<span class="built_in">int</span>)x1; <span class="comment">// x = 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>这里需要进行类型转换是因为round函数返回的是一个Long类型的数值，为了防止精度丢失。</span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line"><span class="built_in">double</span> x2 = <span class="number">9.997</span>;</span><br><span class="line"><span class="built_in">int</span> nx2 = (<span class="built_in">int</span>)Math.round(x2) <span class="comment">// x = 10</span></span><br></pre></td></tr></table></figure><ul><li>如果试图将一个数值从一种类型强制转换成另一种类型，而又超出了目标类型的表示范围，结果就会被截断成一个完全不同的值。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本系列主要讲Java基础知识，是对自己温故知新的总结，一个标题为一个内容，同时也欢迎各方大佬指出文中不对的地方前来交流探讨技
      
    
    </summary>
    
      <category term="Java" scheme="http://vi-young.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://vi-young.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>《用户体验要素》读后笔记（三）</title>
    <link href="http://vi-young.com/2018/05/05/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/05/《用户体验要素》读后笔记（三）/</id>
    <published>2018-05-04T16:10:00.000Z</published>
    <updated>2018-05-09T06:38:56.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构层"><a href="#结构层" class="headerlink" title="结构层"></a>结构层</h1><p>在定义好用户需求并排序好优先级别之后，我们对于最终差您将会包括什么特性已经有了清楚的图像，然而这些需求并没有说明如何将这些分散的片段组成一个整体，这就是范围层的上面一层：为网站建立一个概念结构。</p><p>结构层适当的将我们的关注点从抽象的决策与范围问题，转移到更能影响最后的用户体验的具体因素，传统的软件开发行业，涉及”为用户设计结构化体验”的方法被称为交互设计。在内容建设方面，主要是通过信息架构来构建用户体验。这两个都强调一个重点：确定各个将要呈现给用户的元素的“模式”和“顺序”。与其针对机器的最佳工作方式来设计系统，还不如设计一个对用户而言最好的系统，用户对于“交互组件将怎么样工作”的观点成为概念模型。概念模型是用于在交互设计的开发过程中保持使用方式的一致性的，交互设计会处理每一个级别的错误，以确保更高比例的用户能有积极的体验。</p><h2 id="信息架构"><a href="#信息架构" class="headerlink" title="信息架构"></a>信息架构</h2><ul><li>信息架构所研究的是人们如何认知信息的过程，对于产品而言，信息架构关注的是呈现给用户的信息是否合理并具有意义</li><li>信息架构要求创建分类体系，创建分类体系的方法有从上向下和从下向上，但是这两种方法都有一定的局限性，唯一可避免两者缺点的方法是在两种方法中找到一个平衡点</li><li>一个高效结构的优点就是具备“容纳成长和适应变动”的能力 </li><li>信息架构的基本单位是节点</li><li>节点的结构包括层级结构（树状、辐射）、矩阵结构、自然结构、线性结构</li><li>节点在信息架构是依据组织原则来安置的</li><li>我们的困难不是创建一个结构，而是在创建一个能与“我们的目标”和“用户的需求”相对应、正确的结构</li><li>成功的用户体验，就是能事先预知用户的期望并将其带入到设计当中去</li><li>“使用客户的语言”并且“保持一致性”是非常重要的，我们把用来强调一致性的工具称为受控词典</li><li>元数据的意思，简单地说就是“关于信息的信息”，即以一个结构化的方式来描述内容的信息。   </li></ul><h1 id="框架层"><a href="#框架层" class="headerlink" title="框架层"></a>框架层</h1><p>在充满概念的结构层中开始形成大量的需求，这些需求都是来自我们的战略目标的需求。在框架层，我们要更进一步的提炼这些结构，确定很详细的界面外观，导航和信息设计，这能让晦涩的结构变得实在。对于功能性产品，我们通过界面设计来确定框架，对于信息型产品，要解决的问题是导航设计，但是这两者都应解决信息设计这一方面。</p><blockquote><p>提供给用户做某些事的能力，这属于界面设计。<br> 提供给用户去某个地方的能力，这是导航设计。<br> 传达想法给用户，那就是信息设计。</p></blockquote><ul><li>传统的习惯并非一定要死守，当某种方式有着不错的收益时，应该谨慎的试着违背一些习惯。</li><li>有效的使用比喻，即减少用户在理解你的产品时对猜测的要求。</li><li>界面设计的全部事情就是选择正确的界面元素</li><li>设计复杂系统的界面所面临的最大挑战之一，是弄清楚用户不需要哪些东西，并减少他们的可发现性。</li><li><p>导航设计必须完成以下三个目标：<br> ① 提供用户一种在网页间跳转的方法<br> ② 元素与所包含内容之间的关系<br> ③ 内容与当前用户浏览页面之间的关系<br> 多重导航系统：<br> 全局导航，局部导航，辅助导航，上下文导航，友好导航，远程导航，网络地图，索引表</p></li><li><p>将信息设计和导航设计结合到一起，有一个重要的作用：支持指示标识。</p></li><li><p>页面布局是将信息设计、界面设计和导航设计放置到一起，形成一个统一的，有内在凝聚力的架构，这个架构的具体文档的展示方式为线框图。</p></li><li><p>线框图是整合在框架层的全部三种要素的方法：通过安排和选择界面元素来整合界面设计；通过识别和定义核心导航系统来整合导航设计；通过放置和排列信息组成部分的优先级来整合信息设计。</p></li></ul><h1 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h1><p>在这五个模型的顶端，我们把注意力转移到产品用户会首先注意到的地方：感知设计，这里，内容、功能和美学汇集到一起来缠身一个最终设计，完成其他四个层面的所有目标，并同时满足用户的感官感受。</p><ul><li><p>表现层中几乎所有的产品都会涉及到视觉设计，在视觉设计中，我们用于吸引用户注意的一个主要工具就是对比。</p></li><li><p>在你的设计中保持一致性是另一个重要的组成部分，它能使你的设计有效地传达信息，而不会导致用户迷惑或焦虑。“一致性”在视觉设计的许多不同方面都会起到作用。</p></li><li><p>内部和外部的一致性：<br>  ① 内部一致性的问题。这是说，在产品的两个不同的地方反映了不同的设计方法。<br>  ② 外部一致性的问题。这是说，这个产品没有在同一个企业的其他产品中，反映出被使用的，相同的设计方法。</p></li><li><p>配色方案与排版对于品牌形象的建立，以及对于公众的影响显得尤为重要。</p></li><li><p>在视觉设计领域中对线框图最直接的模拟是视觉模型或设计合成品。</p></li><li><p>承载这些设计决策的权威性文档是风格指南。这个汇总文档确定了视觉设计的每个方面，从最大到最小的范围内的所有元素</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;结构层&quot;&gt;&lt;a href=&quot;#结构层&quot; class=&quot;headerlink&quot; title=&quot;结构层&quot;&gt;&lt;/a&gt;结构层&lt;/h1&gt;&lt;p&gt;在定义好用户需求并排序好优先级别之后，我们对于最终差您将会包括什么特性已经有了清楚的图像，然而这些需求并没有说明如何将这些分散的片段
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://vi-young.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="UE" scheme="http://vi-young.com/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>《用户体验要素》读后笔记（二）</title>
    <link href="http://vi-young.com/2018/05/04/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/04/《用户体验要素》读后笔记（二）/</id>
    <published>2018-05-04T15:52:00.000Z</published>
    <updated>2018-05-09T06:42:29.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="战略层"><a href="#战略层" class="headerlink" title="战略层"></a>战略层</h1><p>成功的用户体验，其基础是一个被明确表达的“战略”，知道企业与用户双方对产品的期许和目标，有助于促进用户体验各方面战略的确定和制定。</p><blockquote><p>明确两个问题：我们要通过这个产品得到什么？ 我们的客户要通过这个产品得到什么？<br>    ①     产品目标     ②     用户需求</p></blockquote><h2 id="产品目标："><a href="#产品目标：" class="headerlink" title="产品目标："></a>产品目标：</h2><p>   ①     商业目标（商业驱动因素）<br>    ②     品牌识别<br>    ③     成功标识</p><h2 id="用户需求："><a href="#用户需求：" class="headerlink" title="用户需求："></a>用户需求：</h2><p>   ①     用户细分</p><pre><code>1. 人口统计学2. 消费心理档案</code></pre><p>   ②     可用性和用户研究</p><pre><code>1. 市场调研方法2. 现场调研3. 任务分析4. 用户测试5. 卡片排序法6. 用户模型</code></pre><p>这是就需要一篇战略文档，而战略文档的关键在于<strong>简洁明了</strong>并<strong>切中要点</strong>，战略是设计用户体验设计流程中的起点。</p><h1 id="范围层"><a href="#范围层" class="headerlink" title="范围层"></a>范围层</h1><p>带着“我们想要什么”、“我们的用户想要什么”的明确认识，我们才能弄清楚如何去满足这些战略的目标，当你把用户需求和产品目标转变成产品应该提供给用户什么样的内容和功能时，战略就变成了范围。</p><p>用文档定义产品需求的必要性：<br>    ① 这样你才知道你在建设什么<br>    ② 这样你才知道你不需要建设什么</p><blockquote><p>范围层被功能型产品和信息型产品分为了功能规格和内容需求，定义需求的详略层度往往取决于该项目的具体范围。</p></blockquote><h2 id="功能规格说明："><a href="#功能规格说明：" class="headerlink" title="功能规格说明："></a>功能规格说明：</h2><ol><li>文档不能解决问题，但定义可以，我们需要的不是文档有厚或有多详细，而是要足够清楚和准确。</li><li>乐观：描述这个系统将要做什么事情去“防止”不好的情况发生</li><li>具体：尽可能详细的解释清楚情况</li><li>在文档中要尽量避免主观的语气</li></ol><h2 id="内容需求："><a href="#内容需求：" class="headerlink" title="内容需求："></a>内容需求：</h2><ol><li>应该提供每一个特性规模的文档预估：文本的字数，图片的像素大小，下载的文件字节、PDF或音频文件等独立元素的大小等。</li><li>内容特性的更新频率来自于产品的战略目标，必须确定一个频率，它是介于你的用户期望值和有效值之间</li></ol><h2 id="确定需求优先级："><a href="#确定需求优先级：" class="headerlink" title="确定需求优先级："></a>确定需求优先级：</h2><ol><li>有些特性可能会因为技术上的局限无法实现，有些则是因为资源与时间上的不足</li><li>很少有功能时独立存在的</li><li>如果你的战略计划或愿景文档在战略目标的范围内制定了一个清晰的优先级别顺序，那么这些优先级别应该是决定是否采纳人们所建议的相关特性的首要因素</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;战略层&quot;&gt;&lt;a href=&quot;#战略层&quot; class=&quot;headerlink&quot; title=&quot;战略层&quot;&gt;&lt;/a&gt;战略层&lt;/h1&gt;&lt;p&gt;成功的用户体验，其基础是一个被明确表达的“战略”，知道企业与用户双方对产品的期许和目标，有助于促进用户体验各方面战略的确定和制定。&lt;
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://vi-young.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="UE" scheme="http://vi-young.com/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>《用户体验要素》 读后笔记（一）</title>
    <link href="http://vi-young.com/2018/05/04/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://vi-young.com/2018/05/04/《用户体验要素》读后笔记（一）/</id>
    <published>2018-05-04T15:38:00.000Z</published>
    <updated>2018-05-09T06:42:52.092Z</updated>
    
    <content type="html"><![CDATA[<p>最近有幸拜读了Jesse James Garrett所著的用户体验要素这本书，感触颇多，感觉对于UE这门课程有了一个较为系统的认识，知道了用户体验为什么是如此的重要，以及用户体验的五个元素。</p><p>在产品开发过程中,人们更多的关注what to do, 设计师经常忽略的另一个因素是how to do, 而这一因素恰恰是决定产品成败的关键因素。</p><blockquote><p>“外形服从于功能”</p></blockquote><p>这种观点对于产品的内部运作(用户不可见的部分)是完全适用的, 但是, 对于产品直接面向用户的那些部分—按钮, 布局, 文字, 也包括外观, 正确的产品形态绝对不是由”功能”所决定的, 而是应该由”<strong>用户自身的心理感受和行为</strong>“来决定的</p><blockquote><p>提供优质的用户体验, 是一个重要的可持续的竞争优势 —— 不仅仅对网站是这样, 对所有类型的产品和服务都是如此</p></blockquote><p>创建吸引人的,高效的用户体验的方法称为”以用户为中心的设计”. 以用户为中心的设计思想非常简单,: 在开发产品的每一个步骤中, 都要把用户列入考虑范围，下面我们来认识一下这些要素。</p><h2 id="五个要素"><a href="#五个要素" class="headerlink" title="五个要素"></a>五个要素</h2><p>用户体验开发时的五个要素(5s)</p><pre><code>表现层(surface)    一系列的网页, 由图片和文字组成框架层(skeleton)    按钮, 控件, 照片和文本区域的位置, 优化设计布局, 以达到这些元素的最大效果和效率结构层(structure)    框架是结构的具体表达方式范围层(scope)    结构层确定网站各种特性和功能最合适的组合方式, 而这些特性和功能就构成了网站的范围层战略层(strategy)    网站的范围基本上是由网站战略层决定的</code></pre><h2 id="双重性"><a href="#双重性" class="headerlink" title="双重性"></a>双重性</h2><p>自下而上的建设，并且让每一个层面的工作在下一个层面可以结束之前完成，网站具有基本的双重性，描述功能型的平台类产品和描述信息的媒介类产品。</p><pre><code>功能性产品, 主要关注的任务, 所有的操作都被纳入一个过程,  去思考人们如何完成这个过程, 这里的网站实际上是用户用于完成任务的一种工具信息性产品, 主要的关注点是信息, 创建一个富信息的用户体验, 就是提供给用户一个可以寻找, 理解且有意义的组合</code></pre><h2 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h2><pre><code>1.战略层所关注的内容都是一样的, 来自企业外部的用户需求和来自自己对网站的期望目标。2.由范围层进入战略层, 在功能型产品一侧转化为功能规格: 对产品的&quot;功能组合&quot;的详细描述. 而在信息型产品一侧, 范围则是以内容需求的形式出现:     对各种内容元素的要求的详细描述。3.在功能性产品一侧, 结构层将从范围转化为交互设计, 在这里我们可以定义系统如何响应用户的请求,另一侧是信息架构: 合理的安排内容元素以促进人类理解信息4.在框架层, 必不可少的是信息设计, 功能性产品偏向于界面设计, 而信息类产品, 则偏向于导航设计.5.最后, 在表现层, 关注点都在于最终产品创建用户体验</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有幸拜读了Jesse James Garrett所著的用户体验要素这本书，感触颇多，感觉对于UE这门课程有了一个较为系统的认识，知道了用户体验为什么是如此的重要，以及用户体验的五个元素。&lt;/p&gt;
&lt;p&gt;在产品开发过程中,人们更多的关注what to do, 设计师经常忽
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://vi-young.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="UE" scheme="http://vi-young.com/tags/UE/"/>
    
  </entry>
  
</feed>
